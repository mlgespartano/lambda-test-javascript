name: terraform-test
run-name: Type of deploy ${{ env.TYPE_DEPLOY }} in environment ${{inputs.environment}}  by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      typeDeploy:
        description: 'Type of deploy'
        required: true
        default: implemetantion
        type: choice
        options:
          - implemetantion
          - bugfix
      environment:
        description: 'Environment to run'
        type: environment
        required: true
        default: qa
  push:
    paths:
      - 'api/**' # Watch changes in the folder exclusively
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TYPE_DEPLOY: ${{ inputs.typeDeploy || 'implemetantion' }}

permissions:
      id-token: write
      contents: read 

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Clone repository
        id: clone
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Setup Node.js 20
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - run: |
          cd api && npm install
          cd ..
          mkdir zip
          zip -r backend_app_config_language.zip api
        env:
          CI: true

      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.2"
      
      - name: Connect to AWS
        id: connect-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: awssyncsession
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Terraform Init
        id: init
        run: |
          terraform fmt
          terraform init
          terraform validate

      - name: Terraform Apply
        id: deploy
        run: terraform apply -auto-approve
        env:
          TF_VAR_appconfig_application_feature_flag: ${{ secrets.APPCONFIG_APPLICATION }}
          TF_VAR_appconfig_environment_feature_flag: ${{ secrets.APPCONFIG_ENVIRONMENT }}
          TF_VAR_appconfig_configuration_feature_flag: ${{ secrets.APPCONFIG_CONFIGURATION }}
      
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve

      - name: Notificar resultado del despliegue
        run: |
          if [[ ${{ steps.deploy.outcome }} == 'success' && ${{ steps.destroy.outcome }} == 'success' ]]; then
            echo "Despliegue exitoso en el entorno de ${{ env.TYPE_DEPLOY }}"
          else
            echo "Error en el despliegue deploy: ${{ steps.deploy.outcome }}"
            echo "Error en el despliegue destroy: ${{ steps.destroy.outcome }}"
          fi
    outputs:
      destroy: ${{ steps.destroy.outputs.destroy }}
