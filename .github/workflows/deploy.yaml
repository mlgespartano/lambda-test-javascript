name: terraform-test
run-name: SHA ${{github.sha}} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      typeDeploy:
        description: 'Type of integration with environment'
        required: true
        default: feature
        type: choice
        options:
          - feature
          - hotfix
          - bugfix
      environment:
        description: 'Environment to run'
        type: environment
        required: true
        default: qa
  push:
    paths:
      - 'api/**' # Watch changes in the folder exclusively
    branches: [ "main", "Develop" ]
  pull_request:
    branches: [ "main" ]

env:
  TYPE_DEPLOY: ${{ inputs.typeDeploy || 'feature' }}
  ENVIRONMENT_DEPLOY: ${{ inputs.environment || 'qa' }}

permissions:
      id-token: write
      contents: read 

jobs:
  sonarqube:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    name: sonarqube
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        id: sonarqube-scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    outputs:
      analysis_check: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}
  
  deployment:
    runs-on: ubuntu-latest
    needs:
      - sonarqube
    if: needs.sonarqube.result == 'success' && needs.sonarqube.outputs.analysis_check == 'PASSED'
    name: deployment
    steps:
      - name: Clone repository
        id: clone
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js 20
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - run: |
          cd api && npm install
          cd ..
          mkdir zip
          zip -r backend_app_config_language.zip api
        env:
          CI: true

      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.2"
      
      - name: Connect to AWS
        id: connect-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: awssyncsession
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Terraform Init
        id: init
        run: |
          terraform fmt
          terraform init
          terraform validate

      - name: Terraform Apply
        id: deploy
        run: terraform apply -auto-approve
        env:
          TF_VAR_appconfig_application_feature_flag: ${{ secrets.APPCONFIG_APPLICATION }}
          TF_VAR_appconfig_environment_feature_flag: ${{ secrets.APPCONFIG_ENVIRONMENT }}
          TF_VAR_appconfig_configuration_feature_flag: ${{ secrets.APPCONFIG_CONFIGURATION }}
      
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve

      - name: Resultado del despliegue
        run: |
          if [[ ${{ steps.deploy.outcome }} == 'success' && ${{ steps.destroy.outcome }} == 'success' ]]; then
            echo "Despliegue exitoso de tipo $TYPE_DEPLOY en el entorno de $ENVIRONMENT_DEPLOY"
            echo "Nombre del proyecto: ${{ vars.NAME_PROJECT }}"
          else
            echo "Error en el despliegue deploy: ${{ steps.deploy.outcome }}"
            echo "Error en el despliegue destroy: ${{ steps.destroy.outcome }}"
          fi
